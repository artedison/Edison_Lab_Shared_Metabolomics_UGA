function VisScores(X,model,components,Y)

% VisScores(X,model,components,Y)
%
% Displays PCA or PLS model scores plots for 1-3 components specified in vector
%"components" 
%
% Arguments:
% 
% X            Data matrix of spectra
% model        Model structure generated by nipalsPCA.m or plsCV.m
% components   a vector containing desired components: at least 1
%              component, but no more than 3.  eg: [1], [1 4], or [1 2 3].
% Y            Optional: if response vector Y is known, use it to color the scores plot

if exist('Y')==0
    Y=zeros(size(X,1),1);
    Ycolor=ones(size(X,1),1);
else
Ycolor=ceil(([(Y-mean(Y))/(2.01*max(abs(Y-mean(Y))))]+.5)*100);
end
cmap=jet(100);

if length(components)==1
    figure, hold on
    for k=1:size(model.scores,1);
        plot(model.scores(k,components(1)),Y(k),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',15)
      
    end
    xlabel(['Comp',num2str(components(1)),', ', num2str(model.variance(components(1))*100,3),'% of Variance'])
elseif length(components)==2
    figure, hold on
    for k=1:size(model.scores,1);
        plot(model.scores(k,components(1)),model.scores(k,components(2)),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',15)
    end
    xlabel(['Comp',num2str(components(1)),', ', num2str(model.variance(components(1))*100,3),'% of Variance'])
    ylabel(['Comp',num2str(components(2)),', ', num2str(model.variance(components(2))*100,3),'% of Variance'])
   
elseif length(components)==3
    figure, hold on
    for k=1:size(model.scores,1);
        plot3(model.scores(k,components(1)),model.scores(k,components(2)),model.scores(k,components(3)),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',15)
    end
    view(3)
    xlabel(['Component',num2str(components(1)),', ', num2str(model.variance(components(1))*100,3),'% of Variance'])
    ylabel(['Component',num2str(components(2)),', ', num2str(model.variance(components(2))*100,3),'% of Variance'])
    zlabel(['Component',num2str(components(3)),', ', num2str(model.variance(components(3))*100,3),'% of Variance'])
else
    error('components must be a vector with 1, 2, or 3 elements')
end