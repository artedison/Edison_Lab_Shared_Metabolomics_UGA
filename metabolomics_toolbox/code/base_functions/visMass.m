function visMass(X,CMZ,PCA,components,Y,spectra)

% visPCA(X,ppm,PCA,components,Y)
%
%Displays PCA scores plots for 1-3 components specified in vector
%"components" as well as correlation/covariance plots for each of the
%specified principal component loadings.
%
% Arguments:
% 
% X            Data matrix of spectra
% ppm          Chemical shift vector corresponding to X
% PCA          PCA structure generated by nipalsPCA.m
% components   a vector containing desired components: at least 1
%              component, but no more than 3.  eg: [1], [1 4], or [1 2 3].
% Y            if response vector Y is known, use it to color the scores plot (optional)

if exist('Y')==0
    Y=zeros(size(X,1),1);
    Ycolor=ones(size(X,1),1);
else
Ycolor=ceil(([(Y-mean(Y))/(2.01*max(abs(Y-mean(Y))))]+.5)*100);
end
cmap=jet(100);

if length(components)==1
    figure, hold on
    for k=1:size(PCA.scores,1);
        plot(PCA.scores(k,components(1)),Y(k),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',8)
        %comment out this line if you want
        %text(PCA.scores(k,components(1)),Y(k)+.1,spectra(k).Title)
    end    
    xlabel(['PC',num2str(components(1)),', ', num2str(PCA.variance(components(1))*100),' Percent of Variance'])
elseif length(components)==2
    figure, hold on
    for k=1:size(PCA.scores,1);
        plot(PCA.scores(k,components(1)),PCA.scores(k,components(2)),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',8)
        text(PCA.scores(k,components(1)),PCA.scores(k,components(2))+5,[int2str(k)])
    end
    xlabel(['PC',num2str(components(1)),', ', num2str(PCA.variance(components(1))*100),' Percent of Variance'])
    ylabel(['PC',num2str(components(2)),', ', num2str(PCA.variance(components(2))*100),' Percent of Variance'])
elseif length(components)==3
    figure, hold on
    for k=1:size(PCA.scores,1);
        plot3(PCA.scores(k,components(1)),PCA.scores(k,components(2)),PCA.scores(k,components(3)),'o','LineWidth',1,'MarkerEdgeColor','k','MarkerFaceColor',cmap(Ycolor(k),:),'MarkerSize',8)
    end
    view(3)
    xlabel(['PC',num2str(components(1)),', ', num2str(PCA.variance(components(1))*100),' Percent of Variance'])
    ylabel(['PC',num2str(components(2)),', ', num2str(PCA.variance(components(2))*100),' Percent of Variance'])
    zlabel(['PC',num2str(components(3)),', ', num2str(PCA.variance(components(3))*100),' Percent of Variance'])
else
    error('components must be a vector with 1, 2, or 3 elements')
end

%%
for k=1:length(components)
    corr=PLS.loadings(components(k),:)./max(abs(PLS.loadings(components(k),:)));
    covar=PLS.loadings(components(k),:).*std(X);
    
    lines=NaN(size(cmap,1),size(corr,2));
    ind=1;
for k=-1:2/size(cmap,1):.99
lines(ind,find(corr>k))=covar(find(corr>k));
ind=ind+1;
end


axes1 = axes('Parent',figure,'FontSize',20);
box(axes1,'on');

hold(axes1,'all');

bar(CMZ,lines(1,:),'FaceColor',cmap(1,:),'Parent',axes1)

hold on
for k=2:size(cmap,1)
    bar(CMZ,lines(k,:),'FaceColor',cmap(k,:),'EdgeColor',cmap(k,:),'Parent',axes1);
end

xlabel('Mass to Charge Ratio (m/z)','FontSize',20,'FontName','Palatino')
ylabel('Back projected UV scaled loading intensities','FontSize',20,'FontName','Palatino')


t=colorbar('peer',axes1,'FontSize',20,'Fontname','Palatino');
set(get(t,'ylabel'),'String', 'UV scaled loading coefficients','FontSize',20);
caxis([-1 1])

xlim([150 1000])

end

