function [output] = makeAndRunFT_comFiles(genFilename,runFilename,specList,varargin)
%% Parse options

    batchMode = 0;
    
    if ~isempty(varargin)
        batchMode = any(ismember('batchMode',varargin));
    end


%% Go to the template directory (we'll run the scripts from here)

        cd(specList.paths.templates)
                    
    %% Generate relative filepaths   
 
        temps2fid = fullPath2RelativePath(specList.paths.templates,...
            specList.paths.fid,...
            'useEscapeCharacters');                    

        fid2temp = fullPath2RelativePath(specList.paths.fid,...
            [specList.paths.templates,'/template_ft.com'],...
            'useEscapeCharacters'); 

        fid2ftcom = fullPath2RelativePath(specList.paths.fid,...
            specList.paths.ft_com,...
            'useEscapeCharacters');

        temps2ftcom = fullPath2RelativePath(specList.paths.templates,...
            specList.paths.ft_com,...
            'useEscapeCharacters');
                    
        temps2ft = fullPath2RelativePath(specList.paths.templates,...
            specList.paths.ft,...
            'useEscapeCharacters');
        
    if batchMode
%%
        
        % Read file
            
            fdata = fileread('template_ft.com');

        % Extract commands
                    
            commands = regexp(fdata,   ['(?<=nmrPipe -in[\s*]\S*\s*\\)','.+',...                                          
                        '(?=','[ *]-out\s*\S*\s*-ov',')'],'match');             
            commandsStr = regexprep(commands{:},'[ \f\t\v]*$',''); % remove trailing whitespace except for newlines/returns
                    
        % Build and write a new file 
                       
            f = fopen('ftbatchtemp.sh','w');
            
                fprintf(f,'%s\n','#!/bin/bash');
                fprintf(f,'%s\n','# Run ft.com commands on all spectra.');
                fprintf(f,'%s\n','# Generated by makeAndRunFT_comFiles with ''batch'' option.');
                fprintf(f,'%s\n','');
                fprintf(f,'%s\n','# Arguments:');
                fprintf(f,'%s\n','# 	$1 : relative filepath from this file to fid files');
                fprintf(f,'%s\n','# 	$2 : relative filepath from fid files to ft files');
                fprintf(f,'%s\n','# 	$3 : relative filepath from this file to ft files');
                fprintf(f,'%s\n','');
                fprintf(f,'%s\n','# Go to the fid files directory');
                fprintf(f,'%s\n','');
                %fprintf(f,'%s\n','thisFile = pwd');
                fprintf(f,'%s\n','cd $1');
                fprintf(f,'%s\n','');
                fprintf(f,'%s\n','ls | while read fname ; do');
                fprintf(f,'%s\n',['nmrPipe -in ./$fname \',commandsStr,'| nmrPipe -out $2/${fname%.*}.ft -ov -verb']);
                fprintf(f,'%s\n','done');
                fprintf(f,'%s\n','');
%                 fprintf(f,'%s\n','# Remove any empty ft files');
%                 fprintf(f,'%s\n','cd $3');
%                 fprintf(f,'%s\n','find . -type f -empty -delete');
%                 fprintf(f,'%s\n','cd thisFile');

            fclose(f); 
            
        % Make executable
            
            fileattrib('ftbatchtemp.sh','+x','a');
        
        % Run the file        
        
            temp2fid = fullPath2RelativePath(specList.paths.templates,...
                                             specList.paths.fid,...
                                             'useEscapeCharacters');
            fid2ft =   fullPath2RelativePath(specList.paths.fid,...
                                             specList.paths.ft,...
                                             'useEscapeCharacters');
            temp2ft =  fullPath2RelativePath(specList.paths.templates,...
                                             specList.paths.ft,...
                                             'useEscapeCharacters');
            cmd = ['ftbatchtemp.sh',...
                    ' ',temp2fid,...     % relative filepath from this file to fid files
                    ' ',fid2ft,...     % relative filepath from fid files to ft files
                    ' ',temp2ft,...     % relative filepath from this file to ft files
                   ];
                                                  
            system(cmd);
            
            output.commands.generate = 'N/A';
            output.commands.run = cmd;
            output.relativePaths.temps2fid = temps2fid;
            output.relativePaths.temps2ft = temps2ft;
            output.relativePaths.fid2temp = fid2temp;
            output.relativePaths.fid2ftcom = fid2ftcom;
            output.relativePaths.temps2ftcom = temps2ftcom;
            output.files.ft_com = 'N/A';
            output.files.ft = dir([temps2ft,'/*.ft']);
            
    else
        %% Generate the individual ft.com files

                           cmd = [genFilename,...
                                    ' ',temps2fid,...   % directory containing the fid files (genFile will cd to here)
                                    ' ','specNumber',...  % str to replace in input file
                                    ' ',fid2temp,...   % input file relative path
                                    ' ',fid2ftcom];      % output files relative path (ft_com directory)

                           system(cmd)

        %% Run the ft.com files

                           system([runFilename,' ',temps2ftcom]);

            output.commands.generate = cmd;
            output.commands.run = [runFilename,' ',temps2ftcom];
            output.relativePaths.temps2fid = temps2fid;
            output.relativePaths.temps2ft = temps2ft;
            output.relativePaths.fid2temp = fid2temp;
            output.relativePaths.fid2ftcom = fid2ftcom;
            output.relativePaths.temps2ftcom = temps2ftcom;
            output.files.ft_com = dir([temps2ftcom,'/*_ft.com']);
            output.files.ft = dir([temps2ft,'/*.ft']);

    end      
            
end