function pipepars = extractPipePars()
%% extractPipePars

% Author: MTJ
% Version: 0.1
% Date: 2020
%
% Description:
%
%   Extracts certain parameters from the fid.com file generated by the
%   'bruker' command (Read Parameters -> Save Script).Must be called from 
%   within the directory containing a single fid.com file.
%
% Inputs:
%       None
%
% Output:
%       pipepars:   structure containing extracted pipe parameter names and
%                   values
%       
% Usage: 
%       % From within a directory containing an fid.com file:
%           pipepars = extractPipePars()  
%                 
% MTJ 2020
%%
% Set up to read standard parameters:                  
                        pipepars = struct();
                            pipepars(1).name = '-xN';
                            pipepars(2).name = '-xT';
                            pipepars(3).name = '-xMODE';
                            pipepars(4).name = '-xSW';
                            pipepars(5).name = '-xOBS';
                            pipepars(6).name = '-xCAR';
                            pipepars(7).name = '-xLAB';
                            pipepars(8).name = '-ndim';
                            pipepars(9).name = '-grpdly';
                            pipepars(10).name = '-bad';
                            pipepars(11).name = '-decim';
                            pipepars(12).name = '-dspfvs';
                            pipepars(13).name = '-ws';
                            pipepars(14).name = 'bruk2pipeParamsGoHere';
%                         pipepars = struct();
%                             pipepars(1).name = 'bruk2pipeParamsGoHere';
%                             pipepars(2).name = '-grpdly';
                            
                    % Read the information as a string from fid.com so we can operate on it:
                        filedata = fileread('fid.com');
                    
                    % Extract any parameters that we want to do things with. Their names will be in pipepars.
                        for p = 1:length(pipepars) %
                            % Locate the parameter and extract (as a string) the value that follows
                                tmp = regexp(filedata,['(?<=',pipepars(p).name,'[\s]+)','[\S]+'],'match');
                                
                                % Handle the case where the parameter cannot be found
                                if ~isempty(tmp) 
                                    
                                    numstr = str2double(tmp{:}); % returns nan if not just a number
                                    
                                    % Convert strings to numbers where appropriate (make sure precision is maxed out)
                                        if ~isnan(numstr)
                                            pipepars(p).value = numstr;
                                        else
                                            pipepars(p).value = tmp{:};
                                        end
                                else
                                    fprintf(['\n\n\tParameter: "',pipepars(p).name,'" not found in the bruk2pipe result file. Skipping...\n\n\n'])
                                    pipepars(p) = [];
                                end
                        end  
                        
                    % Copy the parameters as a block from the .com file
                        % Locate the bounds of the block to be copied
                            leader = 'bruk2pipe -in ./fid \';
                                [~,blockStart] = regexp(filedata,leader);
                                    blockStart = blockStart + 1;
                            ender = '-out';
                                [blockEnd,~] = regexp(filedata,ender);
                                    blockEnd = blockEnd - 1;
                        % Extract the text and store                      
                            params_bruk2pipe = filedata(blockStart:blockEnd);
                        
                        % Get rid of the grdply parameter and value:
                            [startInd,endInd,~] = regexp(params_bruk2pipe,['-grpdly','[\s]+','[\S]+','[\s]+'],'start','end','match');                            
                            params_bruk2pipe(startInd:endInd) = '';
                            
                        % Store block as a parameter
                            %pipepars(contains({pipepars.name},'bruk2pipeParamsGoHere')).value = params_bruk2pipe;
                            pipepars(end+1).name = 'bruk2pipeParamsGoHere';
                            pipepars(end).value = params_bruk2pipe;
                            
end