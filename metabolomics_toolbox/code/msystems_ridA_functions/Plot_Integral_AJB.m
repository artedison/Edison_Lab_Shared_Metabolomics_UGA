function Plot_Integral_AJB(Integral_File,Peak_identity,X_in,ppm_in,Y_in,Mutant_ID)
%
% This function is automatically called by the 'integrate' function
%
% Generates a series of matlab figures showing plots for all designated spectral peaks for
% all samples used when calling the 'integrate' function. Figures are
% seperated according to whether they show wild-type sample data or mutant
% sample data. Each spectral peak's figure data is placed in a
% directory labeled according to the ppm value of the peak within a master
% 'Integrals' Directory generated in the currnt directory used when calling
% the function. 
%
% Plots show a blue line outlining the spectral peak area
% used for integration of the whole peak (TA) and a red line depicting the baseline integrated and
% subtracted from the total peak integration value (BA), generating a Peak
% integral value (PA) for each sample.
%
% This function and the corresponding 'integrate' function only work for pairwise peak integration comparissons 
%
% Arguments:
%   Integral_File 
%       The file output generated by the 'integrate' function
%
%   X_in            
%       N x P matrix of spectral feature intensities (P) for each sample (N)
%
%   Y_in            
%       Y_vector corresponding to Sample Identities
%
%   ppm_in         
%       They array containing all ppm input values
%         
%   mut_ID          
%       The ID number for the data set designated as mutant 
%
%

% Check if 'Integrals' Directory exists (which will house the files created
% here) and if it does not exist, create it
        if exist('Integrals', 'dir')==0
            mkdir Integrals;
        end

[C,ia,ic]=unique(Y_in);

% How many unique sample identities exist? It should only be two if
% comparing between two samples

[uniqueY,~]=size(C);

% Break apart the X_in and Y_in into X_in_WT & X_in_MT AND Y_in_WT &
% Y_in_MT tables

    X_in_1= X_in(Y_in == C(1),:);
    Y_in_1= Y_in(Y_in == C(1));
    X_in_2= X_in(Y_in == C(2),:);
    Y_in_2= Y_in(Y_in == C(2));
    
% figure out if mutants IDs are provided first or second and set up following scripts accordingly  

if Mutant_ID == C(1)
X_in_MT = X_in_1;
Y_in_MT = Y_in_1;
X_in_WT = X_in_2;
Y_in_WT = Y_in_2;
else
X_in_MT = X_in_2;
Y_in_MT = Y_in_2;
X_in_WT = X_in_1;
Y_in_WT = Y_in_1;
end

% Plot the WT Subplots into a 5 by 2 Plot
  
    for i=1:size(Y_in_WT,1)
            integral_WT = figure(1);
            subplot(5,2,i);
            
% Find the ppm Left and Right Bounds used for each WT samples peak
            
            ppmBounds = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.WT_ppm_Bounds(i,:)'));
            ppmLeft = ppmBounds(1);
            ppmRight = ppmBounds(2);
            
% If the ppmBounds are given as zero, plot the original cursor selection

        No_Base = 0;
            if ppmLeft == 0 || ppmRight == 0 
                ppmLeft = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.Interval(1)'));
                ppmRight = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.Interval(2)'));
                No_Base = 1;
            end
            
% find the column numbers corresponding to the left and right bounds

            [~,idxL]=min(abs(ppmLeft-ppm_in));
            [~,idxR]=min(abs(ppmRight-ppm_in));
            
% x-axis for each plot should include only the peak and a 100 points on either side when plotting

            x_axis = ppm_in(idxL-100:idxR+100);
            x_axis_peak = ppm_in(idxL:idxR);
            y_axis = X_in_WT(i,idxL-100:idxR+100);
            y_axis_peak = X_in_WT(i,idxL:idxR);
            
% Only Calculate the baseline and integral if peak is above baseline

        if No_Base == 0
            
% Obtain Baseline intensity values

            Slope_Baseline = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.WT_Baseline_Slope(i)'));
                clear Baseline;
                    for lng = 1:(idxR-idxL)+1
                    Baseline(lng) = y_axis(101)+((lng-1)*Slope_Baseline);   
                    end
                    
% If baseline value is ever greater than data value, baseline value = data value

                for BL_Check = 1:size(y_axis_peak,2)
                        if Baseline(BL_Check) > y_axis_peak(BL_Check)
                            Baseline(BL_Check) = y_axis_peak(BL_Check);
                        end
                end
% Make integral vector for whole area below peak and another for below baseline

            total_area=cumtrapz(y_axis_peak);
            baseline_area=cumtrapz(Baseline);
        else
            total_area = 0;
            baseline_area = 0; 
        end
        
% Plot the spectra, total area integrated in green and baseline in red

            peak_mx = max(y_axis(101:end-100));
            plotr(x_axis,y_axis, 'k', 'LineWidth', 1);
            hold on
            if No_Base == 0
            plotr (x_axis_peak,y_axis_peak, 'b', 'LineWidth', 1);
            plotr (x_axis_peak,Baseline, 'r', 'LineWidth', 1);
            end
            if No_Base ==1
                plot(ppm_in(idxL),X_in_WT(idxL),'r*');
                plot(ppm_in(idxR),X_in_WT(idxR),'r*');
            end
            TA = num2str(round(total_area(end),3));
            BA = num2str(round(baseline_area(end),3));
            FA = num2str(round(total_area(end)-baseline_area(end),3));
            Sample_Number = num2str(i);
            txt = string({join(string({'WT',Sample_Number, '  TA:',TA,'BA:', BA,'PA:', FA}))});
            title({txt});
            ylim([0,(peak_mx*1.5)]);
            hold off
    end
    
% Save the figure in 'Integrals' and appropriate Peak Directory

    cd Integrals
        if exist((Peak_identity), 'dir')
            rmdir (Peak_identity, 's');
        end
    mkdir (Peak_identity);
    cd (Peak_identity);
    saveas(integral_WT,['integral_WT_',Peak_identity],'fig');
    close(integral_WT);
    
% Plot the MT Subplots into a 5 by 2 Plot

    for k=1:size(Y_in_MT,1)
            integral_MT = figure(2);
            subplot(5,2,k);
            
% Find the ppm Left and Right Bounds used for each MT samples peak

            ppmBounds = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.MT_ppm_Bounds(k,:)'));
            ppmLeft = ppmBounds(1);
            ppmRight = ppmBounds(2);
            
% If the ppmBounds are given as zero, plot the original cursor selection

        No_Base = 0;
            if ppmLeft == 0 || ppmRight == 0 
                ppmLeft = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.Interval(1)'));
                ppmRight = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.Interval(2)'));
                No_Base = 1;
            end
            
% Find the column numbers corresponding to the left and right bounds

            [~,idxL]=min(abs(ppmLeft-ppm_in));
            [~,idxR]=min(abs(ppmRight-ppm_in));
            
% x-axis for each plot should include only the peak and a 100 points on either side when plotting

            x_axis = ppm_in(idxL-100:idxR+100);
            x_axis_peak = ppm_in(idxL:idxR);
            y_axis = X_in_MT(k,idxL-100:idxR+100);
            y_axis_peak = X_in_MT(k,idxL:idxR);
            
% Obtain Baseline intensity values

        if No_Base == 0
            Slope_Baseline = eval(strcat('Integral_File.',Peak_identity,'.Raw_Info.MT_Baseline_Slope(k)'));
                    clear Baseline;
                    for lng = 1:(idxR-idxL)+1
                    Baseline(lng) = y_axis(101)+((lng-1)*Slope_Baseline);   
                    end
                    
% If baseline value is ever greater than data value, baseline value = data value

                for BL_Check = 1:size(y_axis_peak,2)
                        if Baseline(BL_Check) > y_axis_peak(BL_Check)
                            Baseline(BL_Check) = y_axis_peak(BL_Check);
                        end
                end   
                
% Make integral vector for whole area below peak and another below baseline

            total_area=cumtrapz(y_axis_peak);
            baseline_area=cumtrapz(Baseline);
        else
            total_area=0;
            baseline_area=0;
        end
        
% Plot the spectra, total area integrated in green and baseline in red

            peak_mx = max(y_axis(101:end-100));
            plotr(x_axis,y_axis, 'k', 'LineWidth', 1);
            hold on
            if No_Base == 0
            plotr (x_axis_peak,y_axis_peak, 'b', 'LineWidth', 1);
            plotr (x_axis_peak,Baseline, 'r', 'LineWidth', 1);
            end
            if No_Base ==1
                plot(ppm_in(idxL),X_in_MT(idxL),'r*');
                plot(ppm_in(idxR),X_in_MT(idxR),'r*');
            end
            TA = num2str(round(total_area(end),3));
            BA = num2str(round(baseline_area(end),3));
            FA = num2str(round(total_area(end)-baseline_area(end),3));
            Sample_Number = num2str(k);
            txt = string({join(string({'MT',Sample_Number, '  TA:',TA,'BA:', BA,'PA:', FA}))});
            title({txt});
            ylim([0,(peak_mx*1.5)]);
            hold off
            
    end
    saveas(integral_MT,['integral_MT_',Peak_identity],'fig');
    close(integral_MT);
    cd ../..