function [sorter_settings, ext_detector_power] = get_settings(parameters)

% gets instrument settings at the end of each file
% input: the parameter matrix generated by import_parameters
% the input 'parameters' must contain Id and Time columns to correctly
% output the parameters!
% output: a matrix where each row corresponds to a different file and each
% column is a different setting

% preallocating space
rowsnan = cell(length(parameters),1);
indexpowerm = cell(length(parameters),1);
ext_detector_power = cell(length(parameters),1);
index = cell(length(parameters),1);
indexflowcell = cell(length(parameters),1);
flowcell = cell(length(parameters),1);
indexscanrate = cell(length(parameters),1);
scan_rate = cell(length(parameters),1);
indexsignal_threshold = cell(length(parameters),1);
signal_threshold = cell(length(parameters),1);
indexmin_tof = cell(length(parameters),1);
min_tof = cell(length(parameters),1);
indexdrop_width = cell(length(parameters),1);
drop_width = cell(length(parameters),1);
indexsort_delay = cell(length(parameters),1);
sort_delay = cell(length(parameters),1);
indexsapphire = cell(length(parameters),1);
sapphire = cell(length(parameters),1);
indexcube = cell(length(parameters),1);
cube = cell(length(parameters),1);
indexsapphire2 = cell(length(parameters),1);
sapphire2 = cell(length(parameters),1);
indexcube2 = cell(length(parameters),1);
cube2 = cell(length(parameters),1);
indexsort_gate = cell(length(parameters),1);
sort_gate = cell(length(parameters),1);   
rowsnan2 = cell(length(parameters),1);
index2 = cell(length(parameters),1);
indexsignal_gain_Extinction = cell(length(parameters),1);
signal_gain_Extinction = cell(length(parameters),1);
indexsignal_gain_Green = cell(length(parameters),1);
signal_gain_Green = cell(length(parameters),1);
indexsignal_gain_Yellow = cell(length(parameters),1);
signal_gain_Yellow = cell(length(parameters),1);
indexsignal_gain_Red = cell(length(parameters),1);
signal_gain_Red = cell(length(parameters),1);    
indexPMT_voltage_Green = cell(length(parameters),1);
PMT_voltage_Green = cell(length(parameters),1);
indexPMT_voltage_Yellow = cell(length(parameters),1);
PMT_voltage_Yellow = cell(length(parameters),1);
indexPMT_voltage_Red = cell(length(parameters),1);
PMT_voltage_Red = cell(length(parameters),1);  
indexpower_sapphire1 = cell(length(parameters),1);
power_sapphire1 = cell(length(parameters),1);
indexpower_cube1 = cell(length(parameters),1);
powercube1 = cell(length(parameters),1);
indexpower_sapphire2 = cell(length(parameters),1);
power_sapphire2 = cell(length(parameters),1);
indexpower_cube2 = cell(length(parameters),1);
powercube2 = cell(length(parameters),1);

% extract info from cells at the bottom of each file
for c = 1:length(parameters);
    rowsnan{c,1} = find(isnan(parameters{c,1}{1,1}));
    indexpowerm{c,1} = rowsnan{c,1}(8,1);
    indexpowerm{c,1} = (indexpowerm{c,1}+1);
    ext_detector_power{c,1} = parameters{c,1}{1,1}(indexpowerm{c,1});
    index{c,1} = rowsnan{c,1}(1,1);
    indexflowcell{c,1} = index{c,1}+1;
    flowcell{c,1} = parameters{c,1}{1,1}(indexflowcell{c,1});
    indexscanrate{c,1} = index{c,1}+2;
    scan_rate{c,1} = parameters{c,1}{1,1}(indexscanrate{c,1});
    indexsignal_threshold{c,1} = index{c,1}+4;
    signal_threshold{c,1} = parameters{c,1}{1,1}(indexsignal_threshold{c,1});
    indexmin_tof{c,1} = index{c,1}+5;
    min_tof{c,1} = parameters{c,1}{1,1}(indexmin_tof{c,1});
    indexdrop_width{c,1} = index{c,1}+19;
    drop_width{c,1} = parameters{c,1}{1,1}(indexdrop_width{c,1});
    indexsort_delay{c,1} = index{c,1}+20;
    sort_delay{c,1} = parameters{c,1}{1,1}(indexsort_delay{c,1});
    indexsapphire{c,1} = index{c,1}+22;
    sapphire{c,1} = parameters{c,1}{1,1}(indexsapphire{c,1});
    indexcube{c,1} = index{c,1}+23;
    cube{c,1} = parameters{c,1}{1,1}(indexcube{c,1});
    indexsapphire2{c,1} = index{c,1}+24;
    sapphire2{c,1} = parameters{c,1}{1,1}(indexsapphire2{c,1});
    indexcube2{c,1} = index{c,1}+25;
    cube2{c,1} = parameters{c,1}{1,1}(indexcube2{c,1});
    indexsort_gate{c,1} = index{c,1}+27;
    sort_gate{c,1} = parameters{c,1}{1,1}(indexsort_gate{c,1});
    
    rowsnan2{c,1} = find(isnan(parameters{c,1}{2,1}));
    index2{c,1} = rowsnan2{c,1}(1,1);
    indexsignal_gain_Extinction{c,1} = index2{c,1}+7;
    signal_gain_Extinction{c,1} = parameters{c,1}{2,1}(indexsignal_gain_Extinction{c,1});
    indexsignal_gain_Green{c,1} = index2{c,1}+8;
    signal_gain_Green{c,1} = parameters{c,1}{2,1}(indexsignal_gain_Green{c,1});
    indexsignal_gain_Yellow{c,1} = index2{c,1}+9;
    signal_gain_Yellow{c,1} = parameters{c,1}{2,1}(indexsignal_gain_Yellow{c,1});
    indexsignal_gain_Red{c,1} = index2{c,1}+10;
    signal_gain_Red{c,1} = parameters{c,1}{2,1}(indexsignal_gain_Red{c,1});
    
    indexPMT_voltage_Green{c,1} = index2{c,1}+14;
    PMT_voltage_Green{c,1} = parameters{c,1}{2,1}(indexPMT_voltage_Green{c,1});
    indexPMT_voltage_Yellow{c,1} = index2{c,1}+15;
    PMT_voltage_Yellow{c,1} = parameters{c,1}{2,1}(indexPMT_voltage_Yellow{c,1});
    indexPMT_voltage_Red{c,1} = index2{c,1}+16;
    PMT_voltage_Red{c,1} = parameters{c,1}{2,1}(indexPMT_voltage_Red{c,1});
    
    indexpower_sapphire1{c,1} = index2{c,1}+22;
    power_sapphire1{c,1} = parameters{c,1}{2,1}(indexpower_sapphire1{c,1});
    indexpower_cube1{c,1} = index2{c,1}+23;
    powercube1{c,1} = parameters{c,1}{2,1}(indexpower_cube1{c,1});
    indexpower_sapphire2{c,1} = index2{c,1}+24;
    power_sapphire2{c,1} = parameters{c,1}{2,1}(indexpower_sapphire2{c,1});
    indexpower_cube2{c,1} = index2{c,1}+25;
    powercube2{c,1} = parameters{c,1}{2,1}(indexpower_cube2{c,1});
   
end   
 
sorter_settings = [ext_detector_power, flowcell, scan_rate, signal_threshold,...
    min_tof,    drop_width,    sort_delay,    sapphire,    cube,    sapphire2,    cube2,    sort_gate,...
    signal_gain_Extinction, signal_gain_Green, signal_gain_Yellow, signal_gain_Red,...
    PMT_voltage_Green, PMT_voltage_Yellow, PMT_voltage_Red,...
    power_sapphire1, powercube1,  power_sapphire2, powercube2];

sorter_settings_legends = {'ext_detector_power';'flowcell'; 'scan_rate'; 'signal_threshold';
 'min_tof'; 'drop_width'; 'sort_delay'; 'sapphire'; 'cube'; 'sapphire2'; 'cube2'; 'sort_gate';
 'signal_gain_Extinction'; 'signal_gain_Green'; 'signal_gain_Yellow'; 'signal_gain_Red';
 'PMT_voltage_Green'; 'PMT_voltage_Yellow'; 'PMT_voltage_Red';
 'power_sapphire1'; 'powercube1';  'power_sapphire2'; 'powercube2'};

sorter_settings = [sorter_settings_legends';sorter_settings];
